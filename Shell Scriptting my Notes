UNIX/LINUX
----------
Java developer
Python
Devops ===> Linux
Hadoop ===> Linux
Tester ===> Linux
Developer ===> Linux

90% of real time application ===> Linux Platform

Topic-1: Overview of UNIX/LINUX OS       DONE
Topic-2: Linux File System 	        DONE
Topic-3: Linux Installation  		DONE
Topic-4: ls ,date,cal command   	DONE
Topic-5: Working with directories	DONE
Topic-6: Working with files 		DONE
Topic-7: Comparing Files		DONE
Topic-8: Creation of links		DONE
Topic-9: Word Cound (WC Command)	DONE
Topic-10: Sorting content of the file 	DONE
Topic-11: Find unique content in the file by using uniq command 	DONE
Topic-12: Input/Output redirection  				DONE
Topic-13: Piping						DONE
Topic-14: How to use multiple commands in a single file          DONE
Topic-15: Command Alisaing 					DONE
Topic-16: Regular Exression and wild card characters  		DONE
Topic-17: Locate and Find Command				DONE
Topic-18: Compression and Uncompression of files (tar,gzip,gunzip,bzip2,bunzip2)   DONE
Topic-19: Grep Command					DONE
Topic-20: Cut Command					DONE
Topic-21: File Permission
Topic-22: Working with editors
Topic-23: Shell Scriptting and Shell Programming
Topic-24: What is shell script and , sha-bang and first script
Shell Variables
Variable substitution and command substitution
Command Line Arguements
How to read dynamic data from the user
Operators
Control Statements
Arrays
Shell script functions
Project on shell scriptting 
Stream Editor(SED)
AWK Programming 
Project on AWK Programming

Linux Administration Basics
---------------------------
Job Scheduling with crontab
User Mangement 
Working with putty,Mobaxterm,XShell
How to customize open source software code
Process Management
Communication Commands (write,wall,msg,mail)


How to use gmail from ubuntu terminal to send email
Package Management
Install and Working with MYSQL Database
Working with Java
Job Control
nohup command
at command
Memory related command
networking commands
working with winscp
working with filezilla
init command 
topmost important linux questions


Topic-1: Overview of UNIX/LINUX OS
==================================
>> It is an OS created in 1960s
>> With lot of extensions and improvements to base version , several flavours introduced by organization / companies
	(RedHat,Linux,Ubuntu)
>> Secure than windows OS
>> 

Charactersticks
---------------
1. It is freeware
2. Open source software
   FOSS (freeware and open source software)
date command ==> Linux 

3. Multiuser OS
4. Multitasking OS
5. Support both cui and gui 
	
CUI is more powerfull than GUI because creating 40 directory using GUI is very time taking process but in CUI
it is a work of 3 second

mkdir dir{1..50}
create 100 files in every directory touch dir{1..50}/filename {1..100}
 
Flavours of UNIX:
-----------------
As UNIX is open source OS , multiple flavour are available with lot of extension and improvement

Ubuntu
RedHat
Centos
Fedora
SlackWare
Open Solaris
Kali 



Components of UNIX:
-------------------
1. Shell
----------
>> It is the outer layer of UNIX operating System.
>> Shell read command provided by user
>> Shell check it that command is valid command or not
>> If everything is proper, then shell interprets our command into kernal understandable form and handover to the     
   kernal. 
>> Shell acts as interface between user and kernal.

2. Kernel
-----------
>> It is the core component of UNIX operating system.
>> It is responsible to execute our commands.
>> It is responsible to interact with hardware components.
>> Memory allocation and processor allocation will takes care by kernal.



Topic-2: Linux File System
===========================
1. In linux everything is treated as file

All files are divided in 3 types
--------------------------------
1. Normal Files/Ordinary Files
----------------
these files contain data. it can be normal text file or binary files(image,video,files,audio files etc)

abc.txt
abc.sh
test.py
sunny.jpg

2. Directories Files
--------------------
1. These files represent directories . In , windows , we can use folder terminology but in linux we can use directory 
   terminology 
2. Directory contains files and sub directory also.

3. Device Files
---------------
>> In linux every file is represented as a file . By using this file we can communicate with that device.
>> Even device also treated as file only 
>> Inside /dev directory all device related file is there

terminal is also represented as ==> file

>>> tty (terminal related file)


Terminal-1 ===> /dev/pts/0 	
Terminal-2 ===> /dev/pts/1

How one terminal communicate with another terminal
---------------------------------------------------
echo "I Love Sunny" > /dev/pts/1 (write this command in terminal and open another terminal to see output)
	
How to clear one terminal from another terminal
-----------------------------------------------
clear > /dev/pts/1


How to check file type:
-----------------------
In Ubuntu
---------
blue color files represent : directories
remaining : ordinary files
green color files : executable files
red color file : link file
white color file : text file


- --> Normal File
d --> Directory File
l --> Link File
c --> Character File
b --> Block file
s --> socket file

File System Navigation Commands
--------------------------------
pwd --> use to check current working directory 
cd .. --> will move to the home directory
cd -- --> 

hidden files and directories
-----------------------------
ls -l --> to list down all files with specifi files types and permission also
ls -a --> to display hidden files , every file contain two hidden files 
	  (i) first hidden file name is . (dot) mean current directory
	  (ii) second hidden file name is ..(dot dot) represent parent directory
	  
	  
/home/daadestroyer/Desktop/dir1/dir2

if you are in dir2
--------------------
current dir --> dir2
parent dir --> dir1

1. cd .
   changes to current directory(useless)
   
2. cd ..
   changes to parent directory
   
3. cd ../../..

4. cd ~
   directly move to user home directory
   
5. cd -
   move to the previous working directory
   
  
Linux File System Hierarchy
----------------------------
1. Linux file system has tree like structure
2. It start with the root (/)
3. / Is the top most directory
4. root directory contain several multiple sub directory
    |-bin 
    |-etc
    |-home 
    |-lib 
    |-usr 
    |-dev 
    |-cdrom
	
	

For every user following directories are there 
----------------------------------------------
Download , Picture , Documents , Music , Picture , Videos

which touch (to know where this command is present)

1. bin directory:
-------------
bin means binary contain binary files  
inside bin every command binary file(executable files) are present like 
We can view content of the file by using the following commands:

1. cat
2. tac
3. rev
4. head
5. tail
6. more 
7. less


2. sbin directory
-----------------
sbin means systembin

normal user used command related binary executable files available in bin directory
super user used commands related  binary executable files available in bin directory

Q. Difference b/w sbin and bin?
--------------------------------
bin ==> for normal user executable binary files
sbin ==> for super user executable binary files

3. etc directory
-----------------
contains all system configuration file

whoami
su -another_user_name

/etc/passwd ==> all user info available in this file


4. tmp directory
------------------
tmp means temporary.
if any file or directory required just for temporary purpose in our current session these files will be deleted 
automatically at the time of system shutdown 

Desktop ==> demo.txt
tmp ==> a.txt b.txt c.txt


-
rw- (Owner can perform read , write but not execute)
r-- (Group member perform only read but not write and execute operation) 
r-- (Other use can perform only read but not write and execute operation)


5. dev directory
-----------------
dev means devices
every device in linux is treated as file
all these device related file will be stored inside dev directory
by using these files we can communicate with that device

eg.
--
tty --> terminal related file
fd --> floppy drive related file
hm --> harddisk related file
ram --> ram related file
stdin --> standard input device file(keyboard)
stdout --> standard output device file


Topic-4: ls ,date,cal command
==============================
1. ls command
--------------
>> list out all files and directories present inside given directories.
>> if we are not providing and directory then it will list out all files of current working directory

ls di1
ls

2. ls -r
------------
ls -r
it will list all files and directory in reverse of alphanetical order

3. ls -l
-----------
display in long listing form

4. ls -t
-----------
-t means creation or last modified time
most of recent will be at the top and old are at bottom  

5. ls -R
-----------
-R means recursive

6. ls -s	
-------------------
-s mean size
the number of blocks said
1 block  = 1k


date command
-------------
we can use date command to display date

various Options
---------------
1. date +%D
   It will display only date in the form : mm/dd/yy
  
2. date +%T 
   Only hh:mm:ss
   
3. date +%d ==> only day value
   date +%m ==> only month value
   date +%y ==> only year value in yy form
   date +%Y ==> only year value in yyyy form

4. date +%H ==> only hours value in 24 hours format
   date +%M ==> only hours value in 24 hours format
   date +%S ==> only hours value in 24 hours format
   

date +%d-%m-%y
date +%D:%M:%Y

How we can check 2 years back data ? with the help of date command
------------------------------------------------------------------
We have to identify 2 years back data
We have to identify   



calendar command
----------------
cal --> to display current month calendar
cal 2020 --> to display complete year calendar


Topic-5: Working with directories
=================================
1. create one directory
----------------------
mkdir dir_name

2. create multiple directory
----------------------------
mkdir dir1_name dir2_name dir3_name 
	 
3. to create directory inside directory
-----------------------------------------
mkdir dir1/dir2/dir3

in this case only dir3 will be created .
but make sure dir1 should be available	 

if you want to create dir0 before dir1 if dir1/dir2/dir3 is already available ? 

dir0/dir1/dir2/
 
mkdir -p

mkdir -p  heroines/{sunny,katrina,kareena,karishma}
heroines/
├── kareena
├── karishma
├── katrina
└── sunny


mkdir -p  heroines/{sunny,katrina,kareena,karishma}/{jan,feb,mar,apr}

heroines/
├── kareena
│   ├── apr
│   ├── feb
│   ├── jan
│   └── mar
├── karishma
│   ├── apr
│   ├── feb
│   ├── jan
│   └── mar
├── katrina
│   ├── apr
│   ├── feb
│   ├── jan
│   └── mar
└── sunny
    ├── apr
    ├── feb
    ├── jan
    └── mar

create 100 lss.txt file in a second
--------------------------------------
touch lss{1.100}.txt


Q. create 5 directory named with dir1 , dir2 , dir3 , dir4 and dir5 . In these directories create empty files named
   with a.txt , b.txt , c.txt
   
mkdir -p dir{1..5}/{a.txt,b.txt,c.txt}  



Assume we're in /home/durga
---------------------------
./scripts/test.sh ===> Relative Path
scripts/test.sh   ===> Relative Path

/home/durga/scripts/test.sh ===> Absolute Path 

Absoulte Path
-------------
It is the path start from root(/) to destination ie. it is complete path
Absolute path means start from root


Relative Path
-------------
It is the path from current working directory to destination
Relative Path means start from current location
 
mkdir -p x/x1/x1{1,2} x/x2 y/y1/y1{1,2} y/y2

x
├── x1
│   ├── x11
│   └── x12
└── x2
y
├── y1
│   ├── y11
│   └── y12
└── y2

Assume we're in x11 directory how to go y2 directory ?
------------------------------------------------------
Absolute Path(start from root)
-------------------------------
cd /home/daadestroyer/Desktop/y/y2
OR
cd ~/Desktop/y/y2

Relative Path(start from current location)
-----------------------------------------
/home/daadestroyer/Desktop/x/x1/x11

cd ./../../.. (till here we come to desktop)
cd ./../../../y/y2 	

Topic-6: Working with files
============================
Copy Command:-
--------------
1. to copy content of one file to another file
----------------------------------------------
cp source_file destination_file

>> If the destination file is not available then cp command itself will create that file and total content also copied
>> If destination file will already available and it contain some data , then that data will overriden with new data

 
2. to copy files to directory
------------------------------
cp file1 file2 file3 destination_directory (all these files will be copied to destination directory)


3. To copy all files of one directory to another dir
-------------------------------------------------------
mkdir a b 

a
├── a1.txt
├── a2.txt
└── a3.txt

cp a/* b


b
├── a1.txt
├── a2.txt
└── a3.txt


4. Whenever we are copying whole directory to another directory always use -r option
-----------------------------------------------------------------------------------
mkdir a


a
├── a1.txt
├── a2.txt
└── a3.txt

cp -r a c

c
├── a1.txt
├── a2.txt
└── a3.txt

5. Before overwritting if we want confirmation then we should use -i option i mean interactive
-----------------------------------------------------------------------------------------------
cp -i file1.txt file2.txt

6. If we want verbose output then -v option.
-----------------------------------------------------------------------------------------------
cp -v file1.txt file2.txt dir1

How to copy data from multiple files into a single file?
--------------------------------------------------------
cat a.txt b.txt c.txt d.txt > all.txt



Moving and Renaming Directories
-------------------------------
Moving --> mv
Rename --> mv

1. Renaming of a file 
---------------------
mv oldfilename newfile

touch a.txt

mv a.txt aaa.txt

2. Renaming Directories
-------------------------
mv old_dirname new_dirname

mkdir aa.txt
mv aa.txt aaa.txt

3. Moving of files from one directory to another directory
-----------------------------------------------------------

1. move all files present inside dir1 to dir2
-----------------------------------------------

mv dir1/* dir2 (dir2 must me alredy there)


2. move total directory to another directory	
---------------------------------------------
mv dir1 dir2

if destionation dir is already available then dir1 will be moved to dir2
if the destionation dir not already available then dir1 will be renamed to dir2



Summary of dir related command
------------------------------

mkdir dir1
mkdir dir1 dir2 dir3
mkdir -p dir1/dir2/dir3
mkdir dir{1..6} 
rm -r dir1
rm -ri dir1


Topic-6: Working with files
===========================
1. creation of files:
---------------------
in linux we can create file using:

a) by using cat command
b) by using touch command
c) by using editor like gedit , nano , vi


a) by using cat command
-----------------------
used to create file with some content
if file is not already there then a new file will be created and the provided data will be written to that file

cat > file1.txt
line1
line2
line3
ctrl + d (to save and exit)

if file1 is already there and we are using cat command then the data will be override
to prevent data with overridng and append new data use >> operator after cat

cat >> file1.txt
line1
line2
line3
ctrl + d 

b) by using touch command
-------------------------
use to create empty file
if file is not there then new file will be created

touch file1.txt

the main objective of touch command
--------------------------------------
1. to create empty file
2. to change timespamp of an existing file
3.


c) by using editor like gedit , nano , vi
-----------------------------------------

2. viewing of files
-------------------

3. copying of files
--------------------
4. comparision of filese
5. renaming of files
6. deleting of files
7. creationg of hidden files and directories
8. creation of link files
9. editing of files


1. cat
------
cat filename.extension
cat abc.text
cat -n abc.txt [to get the line no.s also]
cat -b abc.txt [to remove blank lines]
cat -nb abc.txt [to remove blank lines and blank spaces]
cat file1 file2 file3 file4 file5 [to view multiple files content simultaneously]
cat -n file1 file2 file3 [get the line no.s of all files]

create a new file with some content
-----------------------------------
cat > filename
---write something on file---
---write something on file---
ctrl+d to save file

to append some extra data to an existing file
---------------------------------------------
cat >> filename
---some more data---
---some more data---

to copy content of one file to another file
-------------------------------------------
cp file1 file2
cat file1 > file2

to append one file content to another file content
--------------------------------------------------
cat file1 >> file2

to copy content of multiple file to a single file
-------------------------------------------------
file1 file2 file3 file4 file5 > total.txt

to append content of multiple file to a single file
---------------------------------------------------
file1 file2 file3 file4 file5 >> total.txt


2. tac[vertical reversal]   
-------
It is reverse of cat command means display content in reverse form
here total content will reverse but line not reverse 
cat filename

3. rev[horizontal reversal]
------
rev means reversal
here each line will be reversal 


cat command is best suitable for small files but if large files are there then we should go for head,tail,more,less

4. head
-------
to view specified no of files from top of the file
head -<any number> filename [display only top 5 lines]
head -n -5 filename [it will display all lines from top except last 5 lines]
head -c 100 filename [display first 100 character of the file]


5. tail
-------
to view specified no of files from bottom of the file
tail -<any number> filename [display only top 5 lines]
tail -n -5 filename [it will display last 5 lines]
tail	d -c 100 filename [display first 100 character of the file]


More and Less Command
---------------------
More Command
------------
we can use more command to view file content page by page.

1. more abc.txt
   Press enter --> next line will display
   Press spacebar --> next page will be display 
   Press q --> to exit/quit
   
2. more -d abc.txt
   -d --> option meant for providing details
   
   
Less Command
------------
1. By using mores command we can view file content page by page only in forward direction 
2. If we want to view file content page by page either in forward direction or in backward direction then we should   
   use less command


less abc.txt

d --> to get next page	(d means down)
b --> to go to previous page(b means backward)


Creation of Hidden Files and Directories
=========================================
If any file start with . symbol such file said to be hidden file
If we don't want to display in normal listing then we have to go for hidden files.Hidden files meant for hiding data
. All system files which are internally required by kernel are hidden files only...

we can create hidden files like normal file , only difference is file name should start with dot symbol

touch .securefile1.txt

we can create hidden directory also
-----------------------------------
mkdir .db_info

Conversion of normal files to hidden files
---------------------------------------------

converting hidden dir or file into normal file
----------------------------------------------
mv .securefile.txt unsecurefile.txt

converting normal dir or file into hidden file
----------------------------------------------
mv unsecurefile.txt ssecurefile.txt


to make full secure we have to use permission concept by using chmod 

Topic-7: Comparing Files
========================
we can compare data of two files by using following commands:

cmp
diff
sdiff
vidff
comm


1. cmp
---------
it will compare byte by byte	

syntax : cmp file1.txt file2.txt
	if content is same we won't get any output
	if content is different , then it provides information about only first
	differnece . byte number and line number will be provided .

2. diff
---------
if will show all differences 

syntax : diff file1.txt file2.txt
 	 if content is same it won't produce any output
 	 if content is same different then it will show all differences 

options: -q shows message when files are different
         -s shows message when files are same
         -y shows comparisong line by line(parallel comparison)
         
 	 
sdiff
vidff
comm

Topic-8: Creation of links
==========================

Windows Desktop Shortcut
------------------------


There are two types of link files:
----------------------------------
1. Hard Link File
-------------------
A hard link acts as a copy (mirrored) of the selected file. It accesses the data available in the original file.
If the earlier selected file is deleted, the hard link to the file will still contain the data of that file.


>> only one copy is there but seems to be every where physical copy is available 
>> hardlink file is just another name of the same exact file
>> whatever the changes you make in original file all changes will reflect in hardlink file also
>> similarly whatever changes we perform in hardlink file all changes will reflect to original file also
>> if we remove original file still link file can be accessible 


-rw-rw-r-- 2 daadestroyer daadestroyer 40 Apr  7 11:05 file1Ln.txt
-rw-rw-r-- 2 daadestroyer daadestroyer 40 Apr  7 11:05 file1.txt

>> both original and hardlink file name has same inode number
>> both original and hardlink file have same size 
>> both original and hardlink file have same timestamp

						shubham.jpeg
		
actress directory                     social services people directory         google top ranked people directory

syntax:
-------
$ ln original_file_name hard_link_file_name

eg : ln file1.txt file2ln.txt

actress
   |-sunny.jpeg
   |
   |
social service
   |
   |-sunny.jpeg
   |

ln actress/sunny.jpeg social/sunny.jpeg


2. Soft Link File
-----------------
A soft link (also known as Symbolic link) acts as a pointer or a reference to the file name. It does not access the data available in the original file. If the earlier file is deleted, the soft link will be pointing to a file that does not exist anymore.

>> This is just like windows desktop shortcut
>> softlink file is just a pointer to another file
>> also called as symbolic link
>> we can create softlink file by using ln command but with -s options
>> whatever the changes you make in original file all changes will reflect in hardlink file also
>> similarly whatever changes we perform in hardlink file all changes will reflect to original file also


syntax:
-------
ln -s originalFileName softLinkFileName

ex : ln -s file1.txt file2Ln.txt


lrwxrwxrwx 1 daadestroyer daadestroyer  9 Apr  7 11:28 file1Ln.txt -> file1.txt
-rw-rw-r-- 1 daadestroyer daadestroyer 32 Apr  7 11:28 file1.txt

The difference b/w hardlink and softlink is :
-----------------------------------------------
in softlink seperate level of pointer will assigned on softlink file
in softlink case both the file hard and softlink file both have different timespamp
in softlink case both the file hard and softlink file both have different inode table


if we delete original file then softlink file will be useless


ls -l
l ==> for soft link file

...

several changes to the original file
now old copy available if we have seperate copy


Link files for directories
--------------------------
For files we can create both softlinks and hardlinks 
For directories we can create only soflinks but not hardlinks


We cannot create hardlink for directory because it break filesystem hirearchy


Topic-9: Word Cound (WC Command)
================================
Word Count Command(wc command)
------------------------------
We can count no of words along with that we can count no of lines and no of character present in the given file


wc filename
	no_of_lines , no_of_words , no_of_characters , filename
	
wc a.txt
	6  24 206 a.txt

6 -> no of lines
24 -> no of words
206 -> no of characters

wc -l filename  [get no of lines]
wc -w filename  [get no of words]
wc -c filename  [get no of characters]
wc -wc filename [get no of word and character]
wc -lc filename [get no of line and character]


Topic-10: Sorting content of the file
=====================================

SORT
----
>> sort command sort the file , arranging the records in a particular order
>> by default the sort command sorts file assuming the content are ASCII
>> using option in sort command , it can also be used to sort numerically


1. Sort in alphabetical order
-----------------------------
sort filename.txt

2. Sort on numerical value [option -n]
----------------------------------------
sort filename.txt

3. Sort in reverse order [option -r]
------------------------------------
sort -r filename.txt 

4. Save the sorted results to another file
---------------------------------------
sort -n filename.txt  > filename_sorted.txt

5. Sort Specific Column [option -k]
----------------------------------------------------
sort -t "|" +0 emp1.lst [sort the 0th col of file]
sort -t "|" +1 emp1.lst [sort the 1st col of file]
sort -t "|" +2 emp1.lst [sort the 2nd col of file]
sort -t "|" +5 -n emp1.lst [sort the numeric coloum]

sort the numeric colom:
-----------------------
sort -t "|" -n +5 emp.lst


6. reverse the 5th numeric col in file in desc order
-------------------------------------------
sort -t "|" -r -n +5 emp1.lst

7. rev the 1st col of file in desc order
----------------------------------------
sort -t "|" -r +1 emp1.lst

8. rev the 2nd col of file in asc order
-----------------------------------------
sort -t "|" +2r emp1.lst

9. start sort from 2nd char of 1st col till goes on 1 col of 4th char
---------------------------------------------------------------------
sort -t "|" +1.2 - 1.4 emp1.lst	


Input and Output of command:
----------------------------
>> Commands can take input , perform required operation and produces some output . While executing command if    
   anything goes wrong we will get error message
>> Commands take input either from standard input or from command line arguemnts 
>> Commands can produce results either to standard output or standard error

>> Standard input , Standard output and Standard error are data streams 
>> Standard ip , Standard op and standrad error are data streams


>> Command line args are static and the nature


Topic-12: Input/Output redirection
-----------
File				File Descriptor
-------------------------------------------------
Standard Input STDIN	   	       0
Standard Output STDOUT		       1
Standard Error STDERR		       2

Redirection is a feature in Linux such that when executing a command, you can change the standard input/output devices. The basic workflow of any Linux command is that it takes an input and give an output.

>>> The standard input (stdin) device is the keyboard.
>>> The standard output (stdout) device is the screen.
    With redirection, the above standard input/output can be changed.

Standard Input,Standard Output ,Standard Error are data streams and can flow from one place to another place



Bydefault standard ip is connected with the keyboard	
Bydefault standard output and standard error are connected with terminal


Standard Input from keyboard and output and output to the standard output devices 
---------------------------------------------------------------------------------
cat 	
ip-> shubham
op-> shubham
ip-> nigam
op-> nigam

>> for the cat command , if we're not passing any argument then it will take input from standard input device   
   (keyboard)
>> It will display that output to the standard output device(terminal)



Input from command line argument and error message to standard error device:
---------------------------------------------------------------------------- 

Note: 
Every command can take input from standard input device and from command line arguments ==> wrong

cat ==> can take input from standard input device and from command line arugmentes also
cat abc.txt

rm => can expect input only from command line args but not from standard input device 
rm abc.txt

echo => expecting input from cmd line args  but not standard input 



1. Redirection STANDARD OUTPUT
-------------------------------
>> Standard OP is associated with 1 (0 means standard IP , 1 means standard OP , 2 means standard error)
>> Standard OP connected with terminal
>> By default standard OP connected with terminal but we can redirect this standard OP from terminal to some where else
   based on our req
>> We can perform output redirection by using > and >> symbols
> will perform overwriting of existing data
>> will perform appending to exitsing data

Eg. to redirect standard OP to cat command from terminal to output.txt 

																																																																																																																																							
$ cat filename 1 > output.txt[perform overwriting in file]
$ cat filename 1 >> output.txt[perform appending of data in file]

	
>> by default > and >> is always meant for ouput redirection only 
>> for using > or >> we don't need to use 1 always it is optional

cat INPUT.txt > OUTPUT.txt [redirecting output from standard op device which is terminal]

2. Redirecting STANDARD ERROR
-----------------------------
>> Bydefault standard error device is connected to terminal . Instead of terminal we can redirect error message from 
>> terminal to our required place based on our requirement

cal 1234 

>> We can implement error redirection by using same > and >> symbol
>> Standard error is associated with digit 2

>> $ cal sdsfsdfsfsdfsdf
>> by executing this don't display this error terminal just redirect this error to error.txt
>> in redirection output taking no in command cat 1 > filename [here taking 1 is not compl..]
>> but in redirecting error taking no is compl... cal dfdfdfdf 2>> error.txt

3. Redirection STANDARD INPUT
-----------------------------
>> By default standard ip device is connected with keyboard. but we can redirect from keyboard to somewhere else  
   based on our requirement

>> Standard IP stream associated with 0
>> We can perform input redirection by using < symbol

$ cat 0< a.txt [this command won't take input from command line args it always take input from standard ip which is 
               terminal and input is coming frmo a.txt]

>> this command is taking input from the a.txt insteam from keyboard[standard input] , it will display OP to standard 
   OP device 
>> here 0 is not compl...

cat < INPUT.txt [taking input from INPUT.txt which is standard ip device and not from cmd line args]

Read IP from a.txt and send that OP to output.txt
-------------------------------------------------
cat < a.txt > output.txt [take ip from a.txt thru standard ip which is terminal and not from cmd line args]
or
cat a.txt > b.txt
or
cat a.txt >> b.txt


Suppose both output and error redirected to result.txt only
-----------------------------------------------------------
cat a.txt > result.txt 2>result.txt
or
cat a.txt &> result.txtg

> , >> ----> either outout redirection or error redirection 
&>     ----> both output and error redirection to a single place


Q. How we can redirect the standard op of the ls command to output.txt , but at the same time , redirect standard 
   error to error.txt
----
Ans:-
ls > output.txt 2> error.txt
----

Q. What is the difference b/w < , > , >> symbols ?
----
Ans:-
< symbols meant for input redirection
> symbols meant for output and error redirection where overwritting  will be happened
>> symbol meant from output and error redirection where append will be happened
----

Topic-13: Piping
================	
>> for the command in how many ways we can provide input : cm1 arguement or from standard ip
>> By using piping , multiple commands will work together to fulfill our requirement .
>> We can implement piping concept using | command 

ls -l | wc-l

here standard OP of ls command become standard IP for wc command

ls -l /etc | wc
ls -l /etc | head -10 [getting 10 lines from top]
ls -l /etc | wc | wc -l



Requirement:
------------
the OP of ls command should be saved to file output.txt and should be provided to as input to wc command ?

ls -l > output.txt | wc -l
ls -l >> output.txt c -;

In the middle of piping if i use redirection then it breaks piping concept



Tee Pipe OR T-Junction
----------------------
In piping if we want to save the OP of one command to and if we want to send one command to a file and if we want
to pass that OP to next command simul.. then we use tee command  		

ls -l | tee output.txt | wc 


Eg. to save output of ls command to a file and display to the terminal simultaenously 

ls -l > output.txt [it will save output of ls to output.txt but won't display it]
ls -l | tee output.txt [get output from ls and save that into output.txt and provide input to next command but next 
                       command is not there so it will display the output to the terminal]


Eg. If i want to save the result of ls -l in output.txt and pass the output to wc command and save that output in     
    wc.txt
    
ls -l | tee output.txt | wc > wc.txt [ls output will save to output.txt and wc output was save to wc.txt]
ls -l | tee output.txt | wc | tee wc.txt [save to the file and display to the terminal also]

NOTE : if we use ls -l | tee output.txt | wc > wc.txt [then it will display the op also	]





Req - 2:
--------
Assumes input.txt contains filenames


input.txt
---------
file1.txt
file2.txt
file3.txt
file4.txt

Read file names from input.txt and remove each file?


cat input.txt ==> Standard Output
rm file1.txt file2.txt file3.txt ==> remove 3 files

remove command always expecting from CMD line args only
but in piping the input is always in stream

cat input.txt | rm
> we have to convert that stream into CMD line args

xargs command:
--------------
touch file1.txt file2.txt file3.txt file4.txt file5.txt

cat > input.txt
file1.txt
file2.txt
file3.txt

cat input.txt | xargs rm

NOTE: in piping next command won't accept stream if it won't accept stream convert it into CMD line args using xargs

Topic-14: How to use multiple commands in a single file
=======================================================
command1 | command2 | command3

	 All these commands are dependent commands 
	 
How to execute multiple independent command in a single line:
-------------------------------------------------------------
2 Ways

1. By using semicolon ;
-----------------------
cmd1;cmd2;cmd3;cmd4;.......;cmdn
In case of semicolon if any commands fail in middle then the remaining commands will be executed.

2. By using &&
--------------
cmd1 && cmd2 && cmd3 && cmd4 && cmd5 &&......&& cmdn
In case of and if any commands fail in middle then the remaining commands will not be executed.

eg:

create a directory dir1
create files a.txt , b.txt , c.txt in that dir1
Write current system date and time to a.txt
Write current month calendar to b.txt 

mkdir dir1;touch dir1/{a..c}.txt;date > dir1/a.txt;cal >> dir1/b.txt
mkdir dir1&&touch dir1/{a..c}.txt&&date > dir1/a.txt&&cal >> dir1/b.txt


Topic-15: Command Alisaing
==========================
>> Alias means alternative name or nick name
>> We can give our own convinient nicknames for unix commands . This concept is called command aliasing

How to create alisname:
-----------------------
We have to use alias command	

$ alias nickname='original command'
$ alias nickname="original command"


Linux Administration Basics
---------------------------
Topic : 1 - Job Scheduling with crontab
---------------------------------------
>> cron is derived from greek and its meaning is TIME
>> if any jobs execute automatically at specified time interval such types of jobs are called cron jobs
>> cron jobs can be a single command or can be a script
>> We have to configure cronjobs in crontab
>> cronjobs are best suitable for automation activity
 
 
Various important commands:	
---------------------------
crontab -l  ==> to list out all my cronjobs which are already
crontab -e  ==> to edit already existing cronjob and to define new cronjobs
crontab -r  ==> to remove all configured cronjob 
crontab filename ==> to install a new crontab from a file



Format to configure cronjob:
----------------------------
m   h  dom  mon   dow   command

m---> minutes , the allowed minutes range 0 - 59
h---> hours , the allowed values range 0 - 23 
dom ---> Day of month , allowed values range is 1 - 31
mon ---> month of year , allowed values range 1 - 12 
	 even we can take english words JAN,FEB,MAR,APR,MAY...DEC
dow ---> day of week , the allowed values range is 0 to 6
	 even we can take english words SUN(0),MON(1),TUE(2),WED(3)....SAT


Q.1 Configue cronjob which writes hello message to hello.txt for every minutes
-----------------------------------------------------------------------------

format  :  m   h   dom   mon   dow   command
example :  *   *    *     *     *    echo "hello from crontab" >> ~/Desktop/hello.txt



Q.2 Write a script that takes backup of desktop directory and place that backup copy inside backup directory 
    presnt   in user/home die
    Configure this script as cron job , which should be executed after FRIDAY 23:59
   -----------------------------------------------------------------------
test.sh:
--------
timestamp=$(date +%d_%m_%Y_%H_%M)
tar -cjf backup_$timestamp.tar ~/Desktop/*
mv backup_$timestamp.tar ~/backup

m      h   dom  mon  dow  command
59  :  23   *    *   FRI


backup_20_04_2021_12_30.tar

c -> compress file 
j -> 
f -> create named file
    
using crontab u can't print anything to terminal
7th 4:15



Various possiblities of specifying date and time while configuring cron jobs:
-----------------------------------------------------------------------------
star means every minute

m h dom mon dow command

1. every minute * * * * *
2. Every 2 min */2 
   */2 means every second minute (0,2,4,6)
3. Every even minute
4. Every odd minute
    (1,3,)  
 
 

=====================================================================================================================
Topic-15: Command Alisaing 
==========================
Alias means alternative or nick name
We can give our own convinient nick names for UNIX commands , this concept is called command alisaing 

How to create alias name:
-------------------------
$alias nickname='original command'
$alias nickname="original command"

$alias nickname = 'original command' [don't give space otherwise it will not work]
$alias nickname ='original command' [don't give space otherwise it will not work]


How to list out all alias names
-------------------------------
We have to use alias command

1. Define md as alias for making directory
------------------------------------------
md='mkdir'
md shubham

2. Define cls as alias name for clearing screen
-----------------------------------------------
cls='clear'
clear

How to remove alias name 
------------------------
$unalias command_name 


Q. Can we have multiple alias name for single command
Ans: Yes

Q. I want to define alias name , but how to check is it available already
Ans: No

$ type cls
cls is aliased to `clear'

$ type cls1
bash: type: cls1: not found

a directory will be created in that 20 files will be created
------------------------------------------------------------ 
alias d20f='mkdir dir1;touch dir1/file{1..20}.txt'

Eg: To listout all files present in current working directory , save this data to output.txt and display the number of lines to the terminal. Define alias name 'current' for this total activity?

alias current='ls -l | tee output.txt | wc -l'
	
>> By using wildcard character we can build regular expression
>> A wildcard character can be used as a substitute for required sequence of characters in regular expression




=====================================================================================================================
Topic-16: Regular Exression and wild card characters
====================================================
>> A collection of strings which are having a particular pattern called as regular expression
>> If we want to represent a collection of strings according to a particular pattern then we should go for regular 
   expression

Mobile number regex
-------------------
[6-9][0-9]{9} ==> regex which represent all 10 digit mobile number in india

Mail ID regex
-------------
[a-z]{20}@[gmail][yahoo].com

Where regex are applicable
--------------------------
1. In form validation / to build validation frameworks
   To validate mobile number , mail id , employee id
   
2. To become best software engineer
   ctrl + f -> find
   ctrl + v -> paste 
   ctrl + c -> copy

3. By using wild card character , we can build regular expression 

A wildcard character can be used as a substitute for required sequence of characters in regular expression 
	
*              -->   represent zero or more character i.e any no of characters
?              -->   represent only one character
[]             -->   represent range of characters
[abc]          -->   a or b or c
[!abc]         -->   except a,b,c
[a-z]          -->   from small a to small z
[A-Z]          -->   from capital A to capital Z
[a-zA-Z]       -->   any upper/lower case character
[0-9]          -->   any digit from 0 to 9
[a-zA-Z0-9]    -->   any alpha numeric character
[!a-zA-Z0-9]   -->   except any alpha numeric character means special characters


[[:lower:]] --> any lower case alphabet symbol
[[:upper:]] --> any upper case alphabet symbol
[[:alpha:]] --> any alphabet symbol
[[:digit:]] --> any digit from 0-9
[[:alnum:]] --> any digit from 0-9
[![:digit:]] --> any character except digit
{} --> list of all files with comma seperator


To list all files
-----------------
1. ls

To list all files with some extension
------------------------------------
ls *.* 

To list all files with .java or .txt extension
---------------------------------------
ls *.java
ls *.txt

To list all files whoose length is 3 
------------------------------------
ls ?? [display all files whoose length is 2]
ls ??? [display all files whoose length is 3]
ls ???? [display all files whoose length is 4]
ls ????? [display all files whoose length is 5]

1. To list all where filename first character is start with a or b or c
----------------------------------------------------------------
ls [abc]*

2. To list all where filename first character is not start with a or b or c
----------------------------------------------------------------
ls [!abc]*


3. To list all files where file name start with lower case alphabet symbol
--------------------------------------------------------------------------
ls [a-z]*
alternative : [[:lower:]]*

4. To list all files where file name start with upper case alphabet symbol
--------------------------------------------------------------------------
ls [A-Z]*
alternative : [[:upper:]]

5. To list all files whose name start with digit
----------------------------------------------
ls [0-9]*
alternative : ls [[:digit:]]

6. To list out all files where first name should be upper case letter and second letter should be a digit and third 
   letter should be a lower case alphabet symbol
---------------------------------------------------------------------------------
ls [A-Z][0-9][a-z]
alternative : ls [[:upper:]][[:digit:]][[:lower:]]

7. To list out all files start with special symbol
---------------------------------------------------
ls [!A-Za-z0-9]
alternative : ls [![:a:]]

8. To copy all files starts with digit to dir1 directory
---------------------------------------------------------
cp [0-9]* dir1

9. To move all files in dir1 which have speicial names
-------------------------------------------------------
mv [[:alpha:]]*.txt dir2

10. Remove all fiels start with a or b or c and ends with e or t
-----------------------------------------------------------------
rx [abc]*[et]



=====================================================================================================================
Topic-17: Locate and Find Command
=================================

Find command:
-------------
>> we can use find command to find files and directories present in our system .
>> It provide more search option when compated with locate command like


1. Search only files
2. Search only directories
3. Search by name 
4. Search by size
5. We can restrict maxdepth
6. We can use search result automatically for some commands

>> locate command internally uses database to find result and won't search in the file system directory
>> find command will search in the file system directly . We can expect more accurate results.


1. $ find 
It will find all files and directories in current working directories and below in linux file system . This is default
behavious 

2. we can find all files and directories in the specified directory and below 

$ find /dev
$ find /etc

maxdepth option
---------------

Desktop
  |-file1.txt
  |-level_1_dir
  	|-file2.txt	
  	|-level_2_dir
  	       |-file3.txt	
  	       |-level_3_dir
  	       	      |-file4.txt
  	       	      |-level_4_dir
  	       	      	     |-file5.txt	
  	       	      	     
  	       	      	     
  	       	      	     
mkdir -p level_1_dir/level_2_dir/level_3_dir/level_4_dir   	       	      	     
  	 
 
=====================================================================================================================
Topic-18: Compression and Uncompression of files (tar,gzip,gunzip,bzip2,bunzip2)
================================================================================
tar,gzip,gunzip,bzip2,bunzip2

Advantage of compression and uncompression
------------------------------------------
1. It improvies memory utilization
2. Transportation will become very easy
3. Reduces traffic in the network
4. It reduces download times 


STEPS:
------
1. Creation of archive file
2. Apply compression algorithms on that archive file


1. Creation of archive file:
----------------------------
tar command 
tar --> tape archive 

we can group multiple file and directories into a single archive file by usnig tar command

A) To create a tar file:
------------------------
tar -cvf demo.tar file1.txt file2.txt file3.txt
	
-c => create
-v => verbose
-f => name of file

B) To display table of contents of tar file:
--------------------------------------------
tar -tvf data.tar

-t => table of contents


C) To extract contents of tar file:
-----------------------------------
-x => extraction

tar -xvf data.tar

2. Apply compression algorithms on that archive file:
-----------------------------------------------------
There are multiple compression and decompression algorithms 

1. gzip
2. bzip2

Compression and Decompression by using gzip
-------------------------------------------
1. To compress
	gzip demo.tar
	demo.tar.gz will be created
	
2. To uncompress gz file
	gzip -d demo.tar.gz
	or
	gunzip demo.tar.gz


To create tar file and compression in single command
----------------------------------------------------
1. By using gzip(z) algorithm

To create tar and then compress 
-------------------------------
tar -cvzf demo.tar file1.txt file2.txt file3.txt

To decompress and then extract
------------------------------
tar -xvzf demo.tar


1. By using bzip2(j) algorithm

To create tar and then compress 
-------------------------------
tar -cvjf demo.tar file1.txt file2.txt file3.txt

To decompress and then extract
------------------------------
tar -xvjf demo.tars


gzip ==> performance is good but less compression power
bzip2 ==> performace is less but more compression power



=====================================================================================================================
Topic-19: Grep Command:
=======================
grep --> 
	globally search a regular expression and print it
	global regular expression print 
	global regular expression parser
	
locate , find VS grep:
------------------------
locate,find: to find required file and directories
grep : to find required content in the file
 
Syntax: 
-------
grep <pattern> filename
	It prints all matched lines

demo.txt:
---------
The most important subject is linux 
learning linux is very easy
the knowledge of linux is required everywhere 
your father learn learn , linux now you required to learn linux
java is programming language
python is all rounder

searching 'linux' in single file
--------------------------------
grep 'linux' demo.txt


searching 'linux' is multiple file
----------------------------------
grep 'linux' demo.txt subject.txt


-e --> to search multiple word in a file
-c --> get the count value of particular word in a file
-i --> to search for both capital and small word
-n --> to display line nos before results
-l --> to display filenames only in which pattern exits
-v --> to print all lines except matched lines
-o --> to print only matched patterns instead of total line
-w --> to search exact word in a file


search multiple content in the file
-----------------------------------
we have to use -e option which is extended

grep -e 'linux' -e 'java' demo.txt subject.txt 

get the count value of particular word in a file
------------------------------------------------
grep -c 'linux' demo.txt


Search data by ignoring case
----------------------------
grep -i 'linux' demo.txt 

Display line numbers before results
-----------------------------------
grep -n 'linux' demo.txt

1:The most important subject is linux 
3:the knowledge of linux is required everywhere 
4:your father learn learn , linux now you required to learn Linux


To display only filename in which pattern exist
-----------------------------------------------
we have to use -l option

grep -l 'linux' *.txt	
demo.txt
subjects.txt

To print all lines except matched line
--------------------------------------
-v option we have to use

grep -v 'linux' demo.txt

learning Linux is very easy
java is programming language
python is all rounder

To search for exact word in the file
------------------------------------
grep 'linux' demo.txt
grep -w 'linux' demo.txt


Displaying before,after and surrounding lines including search result
---------------------------------------------------------------------
-A --> means after
-B --> means before
-C --> means before and after

grep 'linux' abc.txt
grep -A 2 'linux' demo.txt
grep -B 2 'linux' demo.txt
grep -C 2 'linux' demo.txt



 NOTE: to search multiple word in a file we use -e option with grep , so instead of using -e option with grep we can
       also use extended grep means egrep
       
egrep 'java|linux' demo.txt
egrep -i 'java|linux' demo.txt ===> egrep command can understand this process
grep 'java|linux' demo.txt ===> grep command can't understand this process

egrep -n -i 'java|linux' demo.txt


grep command always look for the match and not able to understand all regular expression
egrep command can able to understand regular expression


grep along with -e option
-------------------------
grep -e 'java' -e'python' -e'linux' demo.txt


instead of -F we can use fgrep command


Search multiple content on file
-------------------------------
we have to use -e option

grep -e 'java' -e 'linux' demo.txt

Instead of using -e option we can use egrep command
egrep means extended grep


egrep 'java|linux' demo.txt 



grep command with -F option:	
-----------------------------
-F means fixed string
if we want to search a group of fixed string then we should have to go for -F option

grep along with -F option
-------------------------

grep -F "java	
linux 
python " demo.txt


Instead of -F option we use fgrep command
-----------------------------------------
Fixed string global reg exp print 

fgrep "java
linux
" subject.txt


>>> fgrep command can understand patterns also --> no
>>> we have to provide only fixed string


grep VS egrep VS fgrep:
-----------------------
1. grep command can understand all patterns but not all patterns
2. egrep (extended grep)can understand all patterns
3. fgrep (fixed string grep) can not understand , It can accept only strings

Note:
egrep is most powerfull
performace wise fgrep is too good


demo.txt
--------
java
python
linux

subject.txt
-----------
linux is good subject
linux is very usefull subjects
sometimes i feel linux is very difficult to learn
java is programming language
james gosling created java
java is robust and secure
java is multithreaded my nature
java provide high level of exception handling
python is alrounder
python use for ML
python is slow
python created by guido van rossum

$ fgrep -f demo.txt subject.txt


fgrep ==> grep -F
egrep ==> grep -e



To print only matched pattern and not complete line
---------------------------------------------------
Use -o option

grep -o 'linux' demo.txt


Q. Write grep command to extract mobile nos from input file and write to mobile.txt
-----------------------------------------------------------------------------------
Ans:

input.txt
---------
Hello this is shubham with mobile number 8840585165
Hello this is shubham1 with mobile number 9838569722
Hello this is pankaj with mobile number 7599101723
Hello this is rekha with mobile number 6386055278	
Hello this is rekha1 with mobile number 9415785811

grep -o '[6-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' input.txt > mobile.txt	

grep -o '[6-9][0-9]{9}' input.txt ===> this won't work because {9} can't be 
                                       understandable by grep command but egrep command can
                                       understand
                                      
egrep -o '[6-9][0-9]{9}' input.txt
          
To search in a file recursively inside a directory 
--------------------------------------------------
egrep -R 'java|linux' *    [sub dir files also will be considered]    
egrep -i -R 'java|linux' * [this will search linux and java both in upper and lower case in 
                           recursive way]                         
                           
                           
NOTE : whenever we're using grep command for directories , compulsory we should use -R or 
       -r option 
        
Assignment-1:
-------------
1. Save all running process information inside a file
2. display all lines which contains 'lib' 
3. display all lines which doesn't contain 'lib'
4. count all lines where we are getting 'lib'
5. display all lines which contain lib and preceding with lines no.s 
6. display lines which doesn't contain lib , but only top 2 lines       
         
        
        
1. Save all running process information inside a file
   ps -ef > abc.txt [save all running process inside a file]
   
2. display all lines which contains 'lib' 
   grep 'lib' abc.txt
   
3. display all lines which doesn't contain 'lib'
   grep -v 'lib' abc.txt
	
4. count all lines where we are getting 'lib'
   grep -c 'lib' abc.txt

5. display all lines which contain lib and preceding with lines no.s 
   grep -n 'lib' abc.txt
   	
6. display lines which doesn't contain lib , but only top 2 lines       
   grep -v 'lib' abc.txt | head -2         
        
Assignment-2:
-------------

emp.dat
-------
eno|ename|esal|eaddr|dept|gender
100|sunny|1000|pune|admin|male
200|bunny|2000|delhi|sales|female
300|chinny|3000|pune|analyst|male
400|munny|4000|delhi|admin|female
500|dunny|5000|pune|sales|male        
        
        
1. Display all employee belong to admin dept
   grep 'admin' emp.dat
   
2. Display all employee belong to admin and sales dept 
   egrep 'admin|sales' emp.dat
           
3. Display all male employee belong to admin and sales dept        
   egrep 'admin|sales' emp.dat | grep 'male'       
        
        
        
Types of regular expression or pattern:
---------------------------------------
1. character pattern
2. word pattern
3. line pattern        
        
        
1. character pattern:
---------------------
a. grep 'd*' demo.txt
   it display all lines which contain 'd' followed by any name 	

b. grep 'c[aeiou]ll' demo.txt

c. grep 'b..l' demo.txt
   . means any character , it will search for all 4 letter word where first letter 'b' 
     should be compulsory and last letter should be '1'  

2. word pattern:
----------------
grep -w 'linux' demo.txt

\<word\> ==> it will always search for the given word
\<xyz    ==> it will always search for the word start with xyz
xyz\>    ==> it will always search for the word end with xyz

number.txt
----------
1234
123456
6789
67543
12
1

grep '\<[0-9][0-9][0-9][0-9]\>' number.txt
grep '\<[0-9][0-9]' number.txt
grep '[0-9][0-9]\>' number.txt


3. line pattern :       
----------------        
^ ---> line start with
$ ---> line end with

1. grep '^d' demo.txt
   it will display all lines start with d character
      
2. grep '^\java\>' demo.txt  
   it will display all lines start with java word
        
        
        
                  
-----------------------------------------------------------------------------------









=====================================================================================================================

Topic-20: CUT Command:
======================  	       	      	     
CUT COMMAND
-----------
we use cut command to extract data from file
file can be normal or tabular file
suppose if it is normal file

2233|charles harris   |g.m        |sales      |12/12/52| 90000
9876|bill johnson     |director   |production |03/12/50|130000
5678|robert dylan     |d.g.m      |marketing  |04/19/43| 85000
2365|john woodcock    |director   |personnel  |05/11/47|120000
5423|barry wood       |chairman   |admin      |08/30/56|160000
1006|gordon 1ightfoot |director   |sales      |09/03/38|140000 
6213|michael lennon   |g.m.       |accounts   |06/05/62|105000 
1265|p.j. woodhouse   |manager    |sales      |09/12/63| 90000 
4290|nei1 o'bryan     |executive  |production |09/07/50| 65000 
2476|jackie wodehouse |manager    |sales      |05/01/59|110000 
6521|derryk o'brien   |director   |marketing  |09/26/45|125000 
3212|bi11 wilcocks    |d.g.m.     |accounts   |12/12/55| 85000 
3564|ronie trueman    |executive  |personnel  |07/06/47| 75000 
2345|james wilcox     |g.m.       |marketing  |03/12/45|110000 
0110|julie truman     |g.m.       |marketing  |12/31/40| 95000



1. Display character on the specific position in every record
----------------------------------------------------------------
cut -c 9 emp.lst
     |-> -c mean't from 9th character position
    

2. Display rance of character in every record
---------------------------------------------
cut -c 5-9 emp.lst


3. Display all character from nth character to last character in every records
------------------------------------------------------------------------------
cut -c 5- emp.lst

4. Display 1st character to nth character in every records
----------------------------------------------------------
cut -c -5 emp.lst

5. Display 3rd to 5th and 7th to 10th character in every line
-------------------------------------------------------------- 
cut -c 3-5,7-10 emp.lst

6. Display  specific coloumn data 
--------------------------------------
cut -d "|" -f3 emp1.lst

7. Display range of column
----------------------------
cut -d "|" -f 2,3 emp.lst [cut 2nd and 3rd column]


8. Display all columns after 2nd column
----------------------------------------
cut -d "|" -f 2- emp.lst


9. Display all columns till 2nd column
----------------------------------------
cut -d "|" -f 2- emp.lst

10. Extract three column
------------------------
cut -d "|" 1,3,5 emp.lst
 
FILTERS

---------
1. head
2. tail
3. cut
4. paste
5. sort
6. tr [tr 'a' 'A' < emp.lst] use for replacing
7. tee
8. sed
9. grep
10. fgrep
11. egrep



SED
----
SED command in UNIX is stands for stream editor and it can perform lot’s of function on file like, searching, find and replace, insertion or deletion. SED command in UNIX is stands for stream editor and it can perform lot’s of function on file like, searching, find and replace, insertion or deletion. By using SED you can edit files even without opening it,  which is much quicker way to find and replace something in file, than first opening that file in VI Editor and then changing it.

>> SED is a powerful text stream editor. Can do insertion, deletion, search and replace(substitution).
>> SED command in unix supports regular expression which allows it perform complex pattern matching.

OPTIOS : 
--------
s --> means substitution

Syntax:
------>sed OPTIONS... [SCRIPT] [INPUTFILE...] 
 
cat > geekfile.txt
      unix is great os. unix is opensource. unix is free os.
      learn operating system.
      unix linux which one you choose.
      unix is easy to learn.unix is a multiuser os.Learn unix .unix is a powerful.




1. Replacing or substituting string [replace the 1st coming word of every line] : 
-------------------------------------
Sed command is mostly used to replace the text in a file. The below simple sed command replaces the word “unix” with “linux” in the file.

sed 's/unix/linux/' geekfile.txt[it will replace unix with linux of 1st coming word in every line]

Here the “s” specifies the substitution operation. The “/” are delimiters. The “unix” is the search pattern and the “linux” is the replacement string.

2. Replacing the nth occurrence of a pattern in a line : 
-------------------------------------------------------
Use the /1, /2 etc flags to replace the first, second occurrence of a pattern in a line. The below command replaces the second occurrence of the word “unix” with “linux” in a line.

sed 's/unix/linux/2' geekfile.txt


3. Replacing all occurences of the pattern in a line:
-----------------------------------------------------
The substitute flag /g (global replacement) specifies the sed command to replace all the occurrences of the string in the line.

sed 's/unix/linux/g' geekfile.txt




4. Replacing from nth word to all occurrences in a line:
--------------------------------------------------------------
Use the combination of /1, /2 etc and /g to replace all the patterns from the nth occurrence of a pattern in a line. The following sed command replaces the third, fourth, fifth… “unix” word with “linux” word in a line.

'sed 's/unix/linux/3g' geekfile.txt


5. Replacing string on a specific line number:
---------------------------------------------
You can restrict the sed command to replace the string on a specific line number. An example is

sed '3 s/unix/linux/' geekfile.txt	

6. Duplicating the replaced line with /p flag :
-----------------------------------------------
The /p print flag prints the replaced line twice on the terminal. If a line does not have the search pattern and is not replaced, then the /p prints that line only once.

$sed 's/unix/linux/p' geekfile.txt

7. print only the replaced lines:
----------------------------------
Use the -n option along with the /p print flag to display only the replaced lines. Here the -n option suppresses the duplicate rows generated by the /p flag and prints the replaced lines only one time.

sed -n 's/rvce/RVCE/p' shubham.txt

8. Deleting lines from a particular file:
-----------------------------------------
SED command can also be used for deleting lines from a particular file. SED command is used for performing deletion operation without even opening the file

sed 'nd' filename
n -> defines no of line




MORE THINGS IN SED
-------------------
1- Insert one blank line after each line:
------------------------------------------
sed > G line.txt
line-1
line-2
line-3

sed G line.txt

line-1

line-2

line-3

2. To insert two blank lines:
-----------------------------
sed 'G;G' line.txt

3. Delete blank lines and insert one blank line after each line 
--------------------------------------------------------------
sed '/^$/d;G' line.txt


4. Delete all blank spaces
---------------------------


^$ --> is used for deleting all blank spaces
/d is used for display 
G is used for Gap/Blanks






